/**
 * tfm.skilltree.js 2.1
 *
 * Copyright (c) 2015 Evilsantah (http://cheese.formice.com/forum/members/evilsantah.170440/)
 * Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php).
 *
 * 3/13/2015
**/

//////////////////////////////////////
// Helper Functions
//////////////////////////////////////
$.extend({getUrl:function(){var e=window.location.href;var t=e.indexOf("file")!=-1;var n=e.lastIndexOf(t?"?":"/");if(n==-1){return e}return e.slice(0,t?n:n+1)},getUrlVars:function(){var e={},t;var n=window.location.href.slice(window.location.href.indexOf("?")+1).split("&");for(var r=0;r<n.length;r++){t=n[r].split("=");e[""+t[0]]=t[1]}return e},getUrlVar:function(e){return $.getUrlVars()[e]}})

function jsonSize(obj) {
	var t = 0;
	for (key in obj) t++;
	return t;
}

function jsonConcat(a, b) {
	for (var key in b) a[key] = b[key];
	return a;
}

String.prototype.rtrim = function(e) {
	return this.replace(new RegExp(e + "*$", "g"), "");
}

function reportError(e, t) {
	console.log("TfmSkillTreeError :", e, t);
}

const MAX_LEVEL = 888;

const skillData = i18nData.skillData;

//////////////////////////////////////
// Marionette extend stuff
//////////////////////////////////////
const TfmSkillTree = new Backbone.Marionette.Application();
const TfmSkillTableRegion = Backbone.Marionette.MultiRegion.extend({ el: "#skill-table" });
TfmSkillTree.addRegions({ mainRegion: TfmSkillTableRegion });

const Skill = Backbone.Model.extend({
	defaults: {
		id: 0,
		name: null,
		desc: null,
		level: 0,
		maxLevel: 5,
		disabled: !0,
		tierIndex: -1,
		treeModel: null,
		statisticsModel: null
	},
	initialize: function() {
		_.bindAll(this, "increaseLevel", "decreaseLevel", "disable", "onRemainingPointsChange");
	},
	increaseLevel: function(e, t) {
		if (!this.get("disabled") && (this.get("statisticsModel").get("remainingPoints") - e >= 0 || t)) {
		var i = this.get("level") + e;
		if (i <= this.get("maxLevel")) {
			this.set("level", i);
			var n = this.get("treeModel");
			n && n.increaseSpentPoints(e);
		}
		}
	},
	decreaseLevel: function(e) {
		if (!this.get("disabled")) {
		var t = this.get("level") - e;
		if (t >= 0) {
			this.set("level", t);
			var i = this.get("treeModel");
			i && i.increaseSpentPoints(-e);
		}
		}
	},
	disable: function(e) {
		var t = 0;
		return e && ((t = this.get("level")), this.set({
		level: 0
		}, {
		silent: !0
		})), this.set({
		disabled: e
		}), t;
	},
	onRemainingPointsChange: function(e) {
		var t = this.get("treeModel"),
		i = t.get("tiers"),
		n = this.get("tierIndex"),
		l = i.models[n];
		if (!l.get("disabled")) {
		var o = t.get("statisticsModel"),
			s = t.get("id"),
			a = o.get("level"),
			r = (0 == e && 0 == this.get("level")) || (s > 2 && 20 > a);
		this.disable(r);
		}
	},
});

const Skills = Backbone.Collection.extend({
	model: Skill
});

const SkillTier = Backbone.Model.extend({
	defaults: {
		index: 0,
		skills: {},
		treeModel: null,
		disabled: !0
	}
});

const SkillTiers = Backbone.Collection.extend({
	model: SkillTier
});

const SkillTree = Backbone.Model.extend({
	defaults: {
		id: 0,
		name: null,
		spanClass: "",
		points: 0,
		tiers: {},
		statisticsModel: null
	},
	initialize: function() {
		_.bindAll(this, "increaseSpentPoints", "_getPointsBelowTier", "toURLData", "resetPoints");
	},
	increaseSpentPoints: function(e) {
		for (var t = this, i = this.get("tiers"), n = i.length, l = 0, o = this.get("statisticsModel"), s = !1, a = o.get("remainingPoints"), r = n - 1; r >= 0; r--) {
		var h = i.models[r];
		if (!s) {
			var c = t._getPointsBelowTier(r);
			s = !(c >= 5 * (n - r - 1));
		}
		h.set({
			disabled: s
			}, {
			silent: !0
			}),
			h.get("skills").each(function(e) {
			l += e.disable(s);
			});
		}
		this.set("points", this.get("points") + e - l), this.get("statisticsModel").set("remainingPoints", a - e + l);
	},
	_getPointsBelowTier: function(e) {
		var t = 0;
		return (
		this.get("tiers").each(function(i) {
			i.get("index") > e &&
			i.get("skills").each(function(e) {
				t += e.get("level");
			});
		}),
		t
		);
	},
	toURLData: function() {
		var e = {};
		return (
		this.get("tiers").each(function(t) {
			t.get("skills").each(function(t) {
			var i = t.get("level");
			i > 0 && (e[t.get("id")] = i);
			});
		}),
		e
		);
	},
	resetPoints: function() {
		for (var e = this, t = this.get("tiers"), i = t.length - 1; i >= 0; i--) {
		var n = t.models[i];
		n.get("skills").each(function(t) {
			var i = t.get("level");
			i > 0 && (t.set("level", 0), e.increaseSpentPoints(-i));
		});
		}
	},
});

const Statistics = Backbone.Model.extend({
	defaults: {
		level: 70,
		remainingPoints: 69
	},
	initialize: function() {
		_.bindAll(this, "increaseLevel");
	},
	increaseLevel: function(e, t, i) {
		var n = this.get("level");
		if ((n + e >= 1 && n + e <= MAX_LEVEL) || i) {
		var l = this.get("remainingPoints");
		if (l + e >= 0) return t || this.set({
			level: n + e,
			remainingPoints: l + e
		}), !0;
		}
		return !1;
	},
});

const SkillView = Backbone.Marionette.ItemView.extend({
	template: "#skill-template",
	tagName: "div",
	lastClickEvent: {
		pageX: 0,
		pageY: 0
	},
	events: {
		click: "onLeftClick",
		contextmenu: "onRightClick",
		mouseenter: "onHoverStart",
		mouseleave: "onHoverEnd",
		mousemove: "onMouseMove"
	},
	initialize: function() {
		this.listenTo(this.model, "change:level", this.render), this.listenTo(this.model, "change:disabled", this.render), this.listenTo(this.model.get("statisticsModel"), "change:remainingPoints", this.onRemainingPointsChange);
	},
	getSkillItemDOM: function() {
		return this.$el.children(".skill-item");
	},
	getTooltipDOM: function() {
		return this.$el.children(".skill-tooltip");
	},
	onRemainingPointsChange: function(e, t) {
		this.model.onRemainingPointsChange(t);
	},
	onRender: function() {
		var e = this.model.get("level"),
		t = this.model.get("maxLevel"),
		i = this.model.get("disabled"),
		n = "";
		e == t ? (n = "complete") : i ? (n = "disabled") : e > 0 && (n = "incomplete");
		var l = -30 * (this.model.get("id") - 1) - 1;
		this.getSkillItemDOM()
		.css({
			"background-position": l + "px -1px"
		})
		.removeClass("complete disabled incomplete")
		.addClass(n);
		var o = this.getTooltipDOM();
		o.children(".tooltip-desc").html(this._getDescription().replace("\n", "<br />")), this.lastClickEvent.clicked && !i && (this._positionToolTip(o, this.lastClickEvent), o.show()), (this.lastClickEvent.clicked = !1);
	},
	_getDescription: function() {
		for (var level = Math.max(this.model.get("level"), 1), desc = this.model.get("desc"), regex = /\{\{(.*?)\}\}/, match;
		(match = regex.exec(desc));) {
		var formula = match[1],
			result = eval(formula);
		desc = desc.substring(0, match.index) + '<span class="tooltip-desc-var">' + result + "</span>" + desc.substr(match.index + formula.length + 4);
		}
		return desc;
	},
	_toggleHover: function(e) {
		//($.browser.mozilla || $.browser.msie || ($.browser.opera && parseInt($.browser.version) < 15)) && 
		this.$el.find(".skill-item-layer").toggleClass("hover", e);
		var t = this.getTooltipDOM();
		t.toggle(e);
	},
	onHoverStart: function() {
		this._toggleHover(!0);
	},
	onHoverEnd: function() {
		this._toggleHover(!1);
	},
	_positionToolTip: function(e, t) {
		var i = (this.getSkillItemDOM().offset(), e.width()),
		n = t.pageX + 8,
		l = 20,
		o = i + n - (window.innerWidth - l);
		o > 0 && (n = window.innerWidth - l - i), e.css({
		top: t.pageY + 15,
		left: n
		});
	},
	onMouseMove: function(e) {
		var t = this.getTooltipDOM();
		this._positionToolTip(t, e);
	},
	onLeftClick: function(e) {
		(e.clicked = !0), (this.lastClickEvent = e), this.model.increaseLevel(1);
	},
	onRightClick: function(e) {
		return (e.clicked = !0), (this.lastClickEvent = e), this.model.decreaseLevel(1), !1;
	},
});

const SkillTierView = Backbone.Marionette.CollectionView.extend({
	tagName: "li",
	itemView: SkillView,
	initialize: function() {
		this.collection = this.model.get("skills");
	},
});

const SkillTreeView = Backbone.Marionette.CompositeView.extend({
	template: "#skill-tree-template",
	className: "skill-table-column",
	itemView: SkillTierView,
	itemViewContainer: "ul",
	initialize: function() {
		(this.collection = this.model.get("tiers")), this.listenTo(this.model, "change:points", this.changePoints);
	},
	changePoints: function(e, t) {
		this.$el.children(".points").html(t);
	},
});

const StatisticsPanel = Backbone.Marionette.ItemView.extend({
	template: "#stats-template",
	tagName: "div",
	className: "skill-table-column stats-panel",
	holdDownData: null,
	holdDownDelay: 500,
	lastProgressWidth: 0,
	events: {
		"mousedown #level-btn": "onLevelBtnMouseDown",
		"mouseup #level-btn": "onLevelBtnMouseUp",
		"mouseleave #level-btn": "onMouseLeave",
		"mousewheel #level-btn": "onMouseWheel",
		"DOMMouseScroll #level-btn": "onMouseWheel",
		"click #share-btn": "onShareClick",
		"click #redist-btn": "onRedistribute",
	},
	initialize: function() {
		this.listenTo(this.model, "change", this.render);
	},
	_onMouseDown: function(e, t) {
		var self = this;
		this.holdDownData = {
			levelUp: e,
			amount: 0,
			timer: setInterval(function() {
				self.holdDownData.amount++, self.holdDownData.amount > self.holdDownDelay / 100 && t.call(self);
			}, 100),
		};
	},
	_onMouseUp: function(e, t) {
		this.holdDownData.levelUp == e && this.holdDownData.amount < this.holdDownDelay / 100 && t.call(this), clearInterval(this.holdDownData.timer), (this.holdDownData.timer = null), this.onRender();
	},
	_isUpOrDown: function(e) {
		var t = this.$el.find("#level-btn").offset();
		return e.pageY - t.top < this.$el.height() / 2;
	},
	onLevelBtnMouseDown: function(e) {
		this._isUpOrDown(e) ? this._onMouseDown(!0, this.levelUp) : this._onMouseDown(!1, this.levelDown);
	},
	onLevelBtnMouseUp: function(e) {
		this._isUpOrDown(e) ? this._onMouseUp(!0, this.levelUp) : this._onMouseUp(!1, this.levelDown);
	},
	onMouseLeave: function() {
		null != this.holdDownData && (clearInterval(this.holdDownData.timer), (this.holdDownData.timer = null), this.onRender());
	},
	onMouseWheel: function(e) {
		e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0 ? this.levelUp() : this.levelDown();
	},
	_level: function(e, t) {
		this.model.increaseLevel(e);
		var i = this.model.increaseLevel(e, true);
		return this.$el.find(t).toggle(i), i || (clearInterval(this.holdDownData.timer), (this.holdDownData.timer = null)), !1;
	},
	levelUp: function() {
		return this._level(1, "#up-btn");
	},
	levelDown: function() {
		return this._level(-1, "#down-btn");
	},
	_getProminentSkillTree: function() {
		var e = null, t = 0;
		_.each(this.options.skillTrees, function(i) {
			if (i instanceof SkillTreeView) {
				var n = i.model.get("points");
				n > t && ((e = i.model), (t = i.model.get("points")));
			}
		});
		return e;
	},
	_getProminentClass: function() {
		var e = this._getProminentSkillTree();
		return null == e ? null : e.get("spanClass");
	},
	onRender: function() {
		var e = this.model.get("level"),
		t = this.$el.find("#level-label");
		t.css({ "font-size": (200 > e ? (100 > e ? 25 : 21) : 20) + "pt" });
		var i = this._getProminentClass(),
		n = this.$el.find("#level-btn");
		null != i && n.removeClass().addClass(i);
		var l = this.$el.find("#xp-bar-progress");
		null != i && l.removeClass().addClass(i), l.css({
		width: this.lastProgressWidth + "%"
		});
		var o = this.$el.find(".level-btn-img");
		if ((null != i ? o.removeClass("default") : o.addClass("default"), null == this.holdDownData || (null != this.holdDownData && null == this.holdDownData.timer))) {
		var s = this.model.get("remainingPoints"),
			a = (s / (e - 1)) * 100,
			r = Math.max(250, 20 * Math.abs(a - this.lastProgressWidth));
		(this.lastProgressWidth = a), l.animate({
			width: a + "%"
		}, r);
		}
	},
	_getURLData: function() {
		var e = { 0: this.model.get("level") };
		
		_.each(this.options.skillTrees, function(t) {
			if(t instanceof SkillTreeView) {
				e = jsonConcat(e, t.model.toURLData());
			}
		});
		return jsonSize(e) == 1 && e[0] == 50 ? "" : JSON.stringify(e);
	},
	onShareClick: function() {
		const popup = $("#popup-overlay");
		var urlData = window.btoa(this._getURLData());
		var url = $.getUrl();
		
		const isCFM = url.indexOf("cheese.formice.com") != -1;
		if(isCFM) {
			url += "skill-tree";
			if(urlData !== "") {
				url += "?d=" + urlData.rtrim("=");
			}
		}
		
		const $shareLink = popup.find("#share-link");
		const showBitly = $shareLink.val() != url;
		if(showBitly) {
			const $bitly = popup.find("#bitly-link");
			if(isCFM) {
				this._requestBitly(url, $bitly);
				$shareLink.val(url);
			}
		}
		popup.fadeIn(200, function() {
			if(showBitly) popup.find("#bitly-link").select();
		});
	},
	_requestBitly: function(shareUrl, $bitly) {
		$bitly.val("");
		const access_token = "ea620a064ac7dce5140f06b909e269f9fef97228";
		const longUrl = encodeURIComponent(shareUrl);
		
		const url = "https://api-ssl.bitly.com/v3/shorten?access_token=" + access_token + "&longUrl=" + longUrl;
		$.getJSON(url, function(e) {
			$bitly.val(e.data.url), $bitly.select();
		});
	},
	onRedistribute: function() {
		_.each(this.options.skillTrees, function(e) {
		e instanceof SkillTreeView && e.model.resetPoints();
		});
	},
});

//////////////////////////////////////
// Start
//////////////////////////////////////
$(function() {
	$(".skill-table-column").remove(); // Hacky fix to prevent double of everything
	TfmSkillTree.addInitializer(function(options) {
		const skillTrees = [];
		const statisticsModel = new Statistics();
		
		options.skillTrees.forEach((e)=>{
			const treeModel = new SkillTree(e);
			const skillTiers = new SkillTiers(e.tiers);
			skillTiers.each(function(st, i) {
				const skills = new Skills( st.get("skills") );
				skills.each(function(e) {
					e.set({ tierIndex: i, treeModel, statisticsModel });
				}),
				st.set({ index: i, skills });
			}),
			treeModel.set({ tiers: skillTiers, statisticsModel });
			skillTrees.push( new SkillTreeView({ model: treeModel }) );
		});
		
		// Check if url has share data
		var urlVars = $.getUrlVar("d");
		if (urlVars) {
			var json = window.atob(urlVars);
			json = JSON.parse(json);
			
			if (jsonSize(json) > 0) {
				var { "0":shamanLevel, ...skillLevels } = json;
				shamanLevel = parseInt(shamanLevel);
				
				if (shamanLevel > 0) {
					var levelsUsed = 0;
					for (var key in skillLevels) {
						if (parseInt(skillLevels[key]) < 0) {
							levelsUsed = 9999;
							break;
						}
						levelsUsed += parseInt(skillLevels[key]);
					}
					
					if(levelsUsed <= shamanLevel-1) {
						skillTrees.forEach((skillTree)=>{
							const tiers = skillTree.model.get("tiers").models;
							for (var i = tiers.length; i > 0; i--) {
								const tier = tiers[i - 1];
								tier.get("skills").each(function(skill) {
									var skillLevel = skillLevels[skill.get("id")];
									skillLevel && skill.increaseLevel(skillLevel, true);
								});
							}
						});
						statisticsModel.set({
							level: shamanLevel,
							remainingPoints: shamanLevel - levelsUsed - 1
						});
					} else {
						reportError("The user has provided invalid GET parameter(s).", skillLevels);
					}
				} else {
					reportError("The user has provided an invalid shaman level (GET 0).", shamanLevel);
				}
			}
		}
		var c = new StatisticsPanel({ model: statisticsModel, skillTrees: skillTrees });
		skillTrees.unshift(c);
		TfmSkillTree.mainRegion.show(skillTrees);
		if(statisticsModel.get("remainingPoints") == 0) {
			statisticsModel.increaseLevel(1, !1, !0);
			statisticsModel.increaseLevel(-1, !1, !0);
		}
	});
	
	TfmSkillTree.start({ skillTrees: skillData });
	
	function hidePopup() {
		$("#popup-overlay").fadeOut(200);
	}
	
	$("#close-btn").on("click", hidePopup);
	$("#popup-overlay").on("click", hidePopup).find("div").on("click", function(e){ e.stopPropagation(); });
	$('#popup-overlay input[type="text"]').on("click", function() {
		this.select();
	});
	
	if(navigator.appVersion.toUpperCase().indexOf("MAC") >= 0) {
		$("span.hotkey").each(function() {
			var txt = $(this).html().replace("Ctrl", "Cmd");
			$(this).html(txt);
		});
	}
});